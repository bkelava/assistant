import calendar
import datetime
import locale

from typing import Dict
from varname import nameof

import constants.contract_anex_a1_pdf as A1P
import constants.contract_pdf as C
import constants.working_hours_sheet_pdf as Sheet
import constants.part_time_contract as PTC
import constants.full_time_contract as FTC
import constants.contract_anex_a1 as A1

from constants.specials import EMPTY_STRING, DASH, DOT, COLON, DOWN_DASH, LOCALE_CROATIA, SPACE
from database import DatabaseHandler
from tables import Employer, Employee
from utils import (
    create_date,
    create_line,
    replace_character,
    parse_personal_id_from_string,
    remove_unnecesary_dates_from_calendar,
)

from .pdf_base import PDFContractAnexA1, PDFPartTimeContract, PDFFullTimeContract, PDFWorkingHoursSheet
from .pdf_constants import *


class PDFGenerator:
    @staticmethod
    def generate_part_time_contract(data: Dict) -> None:
        pdf: PDFPartTimeContract = PDFPartTimeContract(orientation=PORTRAIT, format=A4)
        pdf.alias_nb_pages()
        pdf.add_page()

        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f"{PTC.label_1} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.EMPLOYERS]}, {data[C.EMPLOYER_INFO]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f", {PTC.label_2}")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f" {data[C.DIRECTOR]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f", {PTC.label_3} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.EMPLOYEES]}, {PERSONAL_ID_TYPES} {data[C.EMPLOYEE_PERSONAL_ID]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f" {PTC.label_4} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.CONTRACT_DATE]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f" {PTC.label_5}")
        pdf.ln()
        pdf.ln()
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.cell(w=0, h=0, txt=f"{PTC.label_6}", align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.cell(w=0, h=0, txt=f"{PTC.label_7}", align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.write(h=0, txt=f"{PTC.label_8}")
        pdf.ln()
        pdf.write(h=0, txt=f"{PTC.label_9} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        if data[C.END_JOB_DATE] == EMPTY_STRING:
            pdf.write(h=0, txt=f"{data[C.END_JOB_DESCRIPTION]}")
        elif data[C.END_JOB_DATE] != EMPTY_STRING and data[C.END_JOB_DESCRIPTION] != EMPTY_STRING:
            pdf.write(h=0, txt=f"{data[C.END_JOB_DATE]} {DASH} {data[C.END_JOB_DESCRIPTION]}")
        else:
            pdf.write(h=0, txt=f"{data[C.END_JOB_DATE]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f" {PTC.label_10}")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{data[C.JOB_DESCRIPTION]}", align=ALIGN_CENTER)
        pdf.ln()
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f"{PTC.label_11} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.TRAIL_NUMBERS]} {data[C.TRAIL_OPTION]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.write(h=0, txt=f"{PTC.label_12} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.WORKING_PLACE]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f"{PTC.label_13}")
        pdf.ln()
        pdf.write(h=0, txt=f"{PTC.label_14}")
        pdf.ln()
        pdf.write(h=0, txt=f"{PTC.label_15} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        if data[C.START_DATE] == EMPTY_STRING and data[C.START_DATE_DESCRIPTION] != EMPTY_STRING:
            pdf.write(h=0, txt=f"{data[C.START_DATE_DESCRIPTION]}")
        elif data[C.START_DATE] != EMPTY_STRING and data[C.START_DATE_DESCRIPTION] == EMPTY_STRING:
            pdf.write(h=0, txt=f"{data[C.START_DATE]}")
        else:
            pdf.write(h=0, txt=f"{data[C.START_DATE]} {data[C.START_DATE_DESCRIPTION]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f"{DOT}")
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{PTC.label_16}", align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.write(h=0, txt=f"{PTC.label_17} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.SALARY]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f" {PTC.label_18}")
        pdf.ln()
        pdf.write(h=0, txt=f"{PTC.label_19}")
        pdf.ln()
        pdf.write(h=0, txt=f"{PTC.label_20} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.SALARY_BONUS]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f" {PTC.label_21}")
        pdf.ln()
        pdf.write(h=0, txt=f"{PTC.label_22}")
        pdf.ln()
        pdf.write(h=0, txt=f"{TEN_SPACES}{PTC.label_23} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.SALARY_INCREMENT_1]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.write(h=0, txt=f"{TEN_SPACES}{PTC.label_24} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.SALARY_INCREMENT_2]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.write(h=0, txt=f"{TEN_SPACES}{PTC.label_25} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.SALARY_INCREMENT_3]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.write(h=0, txt=f"{TEN_SPACES}{PTC.label_26} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.SALARY_INCREMENT_4]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.write(h=0, txt=f"{TEN_SPACES}{PTC.label_27} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.SALARY_INCREMENT_5]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.write(h=0, txt=f"{TEN_SPACES}{PTC.label_28} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.SALARY_INCREMENT_6]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{PTC.label_29}", align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.write(h=0, txt=f"{PTC.label_30}")
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{PTC.label_31}", align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.write(h=0, txt=f"{PTC.label_32} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.WORK_TYPE]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f" {PTC.label_33} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.WEEKLY_WORKING_HOURS]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f" {PTC.label_34}")
        pdf.ln()
        pdf.write(h=0, txt=f"{PTC.label_35} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.WORKING_SHIFT]}")
        if data[C.WORKING_SHIFT_DESCRIPTION] == EMPTY_STRING:
            pdf.set_font(NOTO_SANS, "", 12)
            pdf.write(h=0, txt=f"{PTC.label_36} ")
            pdf.set_font(NOTO_SANS, BOLD, 12)
            pdf.write(h=0, txt=f"{data[C.WORKING_TIME_START]} {DASH} {data[C.WORKING_TIME_END]}{DOT}")
        else:
            pdf.write(h=0, txt=f"{COLON} {data[C.WORKING_SHIFT_DESCRIPTION]}{DOT}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.write(h=0, txt=f"{PTC.label_37}")
        pdf.ln()
        pdf.write(h=0, txt=f"{PTC.label_38} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.WEEKLY_TIME_OFF]}{DOT}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.write(h=0, txt=f"{PTC.label_39} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.VACATION]} {data[C.VACATION_DESCRIPTION]}{DOT}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{PTC.label_40}", align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        label_41 = PTC.label_41.replace("\n", " ")
        pdf.write(h=0, txt=f"{label_41}")
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{PTC.label_42}", align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.write(h=0, txt=f"{PTC.label_43} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.CONTRACT_TERMINATION]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f" {PTC.label_44}")
        pdf.ln()
        pdf.write(h=0, txt=f"{PTC.label_45} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.CONTRACT_TERMINATION_EMPLOYER]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f" {PTC.label_46} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.CONTRACT_TERMINATION_EMPLOYEE]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f" {PTC.label_47}")
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{PTC.label_48}", align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.cell(w=0, h=0, txt=f"{data[C.RIGHTS_AND_OBLIGATIONS]}{DOT}", align=ALIGN_CENTER)
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{PTC.label_49}", align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.write(h=0, txt=f"{PTC.label_50} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.COURT]}{DOT}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.write(h=0, txt=f"{PTC.label_51} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        if data[C.CONTRACT_STARTING_WITH] == EMPTY_STRING and data[C.CONTRACT_START_WITH_DESCRIPTION] != EMPTY_STRING:
            pdf.write(h=0, txt=f"{data[C.CONTRACT_START_WITH_DESCRIPTION]}{DOT}")
        elif data[C.CONTRACT_STARTING_WITH] != EMPTY_STRING and data[C.CONTRACT_START_WITH_DESCRIPTION] == EMPTY_STRING:
            pdf.write(h=0, txt=f"{data[C.CONTRACT_STARTING_WITH]}")
        else:
            pdf.write(h=0, txt=f"{data[C.CONTRACT_STARTING_WITH]} {data[C.CONTRACT_START_WITH_DESCRIPTION]}{DOT}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.write(h=0, txt=f"{PTC.label_52}")
        pdf.ln(30)
        employer: str = f"{EMPLOYER}{COLON} {data[C.DIRECTOR]}"
        employee: str = f"{EMPLOYEE}{COLON} {data[C.EMPLOYEES]}"
        pdf.cell(w=0, h=0, txt=employer, align=ALIGN_LEFT)
        pdf.cell(w=0, h=0, txt=employee, align=ALIGN_RIGHT)
        pdf.ln(20)
        pdf.cell(w=0, h=0, txt=f"{create_line(len(employer))}", align=ALIGN_LEFT)
        pdf.cell(w=0, h=0, txt=f"{create_line(len(employee))}", align=ALIGN_RIGHT)

        output: str = replace_character(
            f"{nameof(PTC)}{DOWN_DASH}{data[C.EMPLOYERS].upper()}{DOWN_DASH}{data[C.EMPLOYEES].upper()}{PDF_EXTENSION}"
        )
        pdf.output(output)

    @staticmethod
    def generate_full_time_contract(data: Dict) -> None:
        pdf: PDFFullTimeContract = PDFFullTimeContract(orientation=PORTRAIT, format=A4)
        pdf.alias_nb_pages()
        pdf.add_page()

        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f"{FTC.label_1} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.EMPLOYERS]}, {data[C.EMPLOYER_INFO]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f", {FTC.label_2}")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f" {data[C.DIRECTOR]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f", {FTC.label_3} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.EMPLOYEES]}, {PERSONAL_ID_TYPES} {data[C.EMPLOYEE_PERSONAL_ID]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f" {FTC.label_4} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.CONTRACT_DATE]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f" {FTC.label_5}")
        pdf.ln()
        pdf.ln()
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.cell(w=0, h=0, txt=f"{FTC.label_6}", align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.cell(w=0, h=0, txt=f"{FTC.label_7}", align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.write(h=0, txt=f"{FTC.label_8}")
        pdf.ln()
        pdf.write(h=0, txt=f"{FTC.label_9} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{data[C.JOB_DESCRIPTION]}", align=ALIGN_CENTER)
        pdf.ln()
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f"{FTC.label_10} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.TRAIL_NUMBERS]} {data[C.TRAIL_OPTION]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.write(h=0, txt=f"{FTC.label_11} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.WORKING_PLACE]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f"{FTC.label_12}")
        pdf.ln()
        pdf.write(h=0, txt=f"{FTC.label_13}")
        pdf.ln()
        pdf.write(h=0, txt=f"{FTC.label_14} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        if data[C.START_DATE] == EMPTY_STRING and data[C.START_DATE_DESCRIPTION] != EMPTY_STRING:
            pdf.write(h=0, txt=f"{data[C.START_DATE_DESCRIPTION]}")
        elif data[C.START_DATE] != EMPTY_STRING and data[C.START_DATE_DESCRIPTION] == EMPTY_STRING:
            pdf.write(h=0, txt=f"{data[C.START_DATE]}")
        else:
            pdf.write(h=0, txt=f"{data[C.START_DATE]} {data[C.START_DATE_DESCRIPTION]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{FTC.label_15}", align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{FTC.label_16} ", align=ALIGN_CENTER)
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.SALARY]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f" {FTC.label_17}")
        pdf.ln()
        pdf.write(h=0, txt=f"{FTC.label_18}")
        pdf.ln()
        pdf.write(h=0, txt=f"{FTC.label_19} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.SALARY_BONUS]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f" {FTC.label_20}")
        pdf.ln()
        pdf.write(h=0, txt=f"{FTC.label_21}")
        pdf.ln()
        pdf.write(h=0, txt=f"{TEN_SPACES}{FTC.label_22} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.SALARY_INCREMENT_1]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.write(h=0, txt=f"{TEN_SPACES}{FTC.label_23} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.SALARY_INCREMENT_2]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.write(h=0, txt=f"{TEN_SPACES}{FTC.label_24} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.SALARY_INCREMENT_3]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.write(h=0, txt=f"{TEN_SPACES}{FTC.label_25} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.SALARY_INCREMENT_4]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.write(h=0, txt=f"{TEN_SPACES}{FTC.label_26} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.SALARY_INCREMENT_5]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.write(h=0, txt=f"{TEN_SPACES}{FTC.label_27} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.SALARY_INCREMENT_6]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{FTC.label_28}", align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.write(h=0, txt=f"{FTC.label_29}")
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{FTC.label_30}", align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.write(h=0, txt=f"{FTC.label_31} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.WORK_TYPE]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f" {FTC.label_32} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.WEEKLY_WORKING_HOURS]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f" {FTC.label_33}")
        pdf.ln()
        pdf.write(h=0, txt=f"{FTC.label_34} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.WORKING_SHIFT]}")
        if data[C.WORKING_SHIFT_DESCRIPTION] == EMPTY_STRING:
            pdf.set_font(NOTO_SANS, "", 12)
            pdf.write(h=0, txt=f"{FTC.label_35} ")
            pdf.set_font(NOTO_SANS, BOLD, 12)
            pdf.write(h=0, txt=f"{data[C.WORKING_TIME_START]} {DASH} {data[C.WORKING_TIME_END]}{DOT}")
        else:
            pdf.write(h=0, txt=f"{COLON} {data[C.WORKING_SHIFT_DESCRIPTION]}{DOT}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.write(h=0, txt=f"{FTC.label_36}")
        pdf.ln()
        pdf.write(h=0, txt=f"{FTC.label_37} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.WEEKLY_TIME_OFF]}{DOT}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.write(h=0, txt=f"{FTC.label_38} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.VACATION]} {data[C.VACATION_DESCRIPTION]}{DOT}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{FTC.label_39}", align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        label_40 = PTC.label_40.replace("\n", " ")
        pdf.write(h=0, txt=f"{label_40}")
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{FTC.label_41}", align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.write(h=0, txt=f"{FTC.label_42} ")
        pdf.ln()
        pdf.write(h=0, txt=f"{FTC.label_43} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.CONTRACT_TERMINATION_EMPLOYER]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f" {FTC.label_44} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.CONTRACT_TERMINATION_EMPLOYEE]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f" {FTC.label_45}")
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{FTC.label_46}", align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.cell(w=0, h=0, txt=f"{data[C.RIGHTS_AND_OBLIGATIONS]}{DOT}", align=ALIGN_CENTER)
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{FTC.label_47}", align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.write(h=0, txt=f"{FTC.label_48} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[C.COURT]}{DOT}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.write(h=0, txt=f"{FTC.label_49} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        if data[C.CONTRACT_STARTING_WITH] == EMPTY_STRING and data[C.CONTRACT_START_WITH_DESCRIPTION] != EMPTY_STRING:
            pdf.write(h=0, txt=f"{data[C.CONTRACT_START_WITH_DESCRIPTION]}")
        elif data[C.CONTRACT_STARTING_WITH] != EMPTY_STRING and data[C.CONTRACT_START_WITH_DESCRIPTION] == EMPTY_STRING:
            pdf.write(h=0, txt=f"{data[C.CONTRACT_STARTING_WITH]}")
        else:
            pdf.write(h=0, txt=f"{data[C.CONTRACT_STARTING_WITH]} {data[C.CONTRACT_START_WITH_DESCRIPTION]}{DOT}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.ln()
        pdf.write(h=0, txt=f"{FTC.label_50}")
        pdf.ln(30)
        employer: str = f"{EMPLOYER}{COLON} {data[C.DIRECTOR]}"
        employee: str = f"{EMPLOYEE}{COLON} {data[C.EMPLOYEES]}"
        pdf.cell(w=0, h=0, txt=employer, align=ALIGN_LEFT)
        pdf.cell(w=0, h=0, txt=employee, align=ALIGN_RIGHT)
        pdf.ln(20)
        pdf.cell(w=0, h=0, txt=f"{create_line(len(employer))}", align=ALIGN_LEFT)
        pdf.cell(w=0, h=0, txt=f"{create_line(len(employee))}", align=ALIGN_RIGHT)

        output: str = replace_character(
            f"{nameof(FTC)}{DOWN_DASH}{data[C.EMPLOYERS].upper()}{DOWN_DASH}{data[C.EMPLOYEES].upper()}{PDF_EXTENSION}"
        )
        pdf.output(output)

    def generate_anex_for_a1(data: Dict) -> None:
        pdf: PDFContractAnexA1 = PDFContractAnexA1(orientation=PORTRAIT, format=A4)
        pdf.alias_nb_pages()
        pdf.add_page()

        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[A1P.EMPLOYER]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f" {A1.label_1} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[A1P.EMPLOYER_DIRECTOR]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f" {A1.label_2} {A1.label_3} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[A1P.EMPLOYEE]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f", {PERSONAL_ID_TYPES}{COLON} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[A1P.EMPLOYEE_PERSONAL_ID]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f", {A1.label_4}")
        pdf.ln()
        pdf.ln()
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.cell(w=0, h=0, txt=f"{A1.label_5}", border=0, ln=0, align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.cell(w=0, h=0, txt=f"{A1.label_6}", border=0, ln=0, align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.write(h=0, txt=f"{A1.label_7}")
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{A1.label_8}", border=0, ln=0, align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.write(h=0, txt=f"{A1.label_9} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[A1P.CONTRACT_DATE]} ")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f"{A1.label_10}")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[A1P.CONTRACT_TYPE]}{DOT}")
        pdf.ln()
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f"{A1.label_11} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[A1P.ANEX_END_DATE]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f"{A1.label_12}")
        pdf.ln()
        pdf.write(h=0, txt=f"{A1.label_13}")
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{A1.label_14}", border=0, ln=0, align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.write(h=0, txt=f"{A1.label_15} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[A1P.WORKING_PLACE]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f"{A1.label_16_1} {A1.label_16_2}")
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{A1.label_17}", border=0, ln=0, align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.write(h=0, txt=f"{A1.label_18_1} {A1.label_18_2}")
        pdf.ln()
        pdf.write(h=0, txt=f"{A1.label_19} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[A1P.JOB_DESCRIPTION]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f"{A1.label_20_1} {A1.label_20_2} {A1.label_20_3}")
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{A1.label_21}", border=0, ln=0, align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.write(h=0, txt=f"{A1.label_22}")
        pdf.ln()
        pdf.write(h=0, txt=f"{A1.label_23}")
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{A1.label_24}", border=0, ln=0, align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.write(h=0, txt=f"{A1.label_25_1} {A1.label_25_2}")
        pdf.ln()
        pdf.write(h=0, txt=f"{A1.label_26}")
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{A1.label_27}", border=0, ln=0, align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.write(h=0, txt=f"{A1.label_28}")
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{A1.label_29}", border=0, ln=0, align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.write(h=0, txt=f"{A1.label_30_1} {A1.label_30_2} {A1.label_30_3}")
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{A1.label_31}", border=0, ln=0, align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.write(h=0, txt=f"{A1.label_32_1} {A1.label_32_2}")
        pdf.ln()
        pdf.write(h=0, txt=f"{A1.label_33_1} {A1.label_33_2}")
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{A1.label_34}", border=0, ln=0, align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.write(h=0, txt=f"{A1.label_35}")
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{A1.label_36}", border=0, ln=0, align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.write(h=0, txt=f"{A1.label_37_1} {A1.label_37_2}")
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{A1.label_38}", border=0, ln=0, align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.write(h=0, txt=f"{A1.label_39}")
        pdf.ln()
        pdf.ln()
        pdf.cell(w=0, h=0, txt=f"{A1.label_40}", border=0, ln=0, align=ALIGN_CENTER)
        pdf.ln()
        pdf.ln()
        pdf.write(h=0, txt=f"{A1.label_41_1} {A1.label_41_2}")
        pdf.ln(10)
        pdf.write(h=0, txt=f"{A1.label_42} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[A1P.SIGNATURE_PLACE]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f" {A1.label_43} ")
        pdf.set_font(NOTO_SANS, BOLD, 12)
        pdf.write(h=0, txt=f"{data[A1P.SIGNATURE_DATE]}")
        pdf.set_font(NOTO_SANS, "", 12)
        pdf.write(h=0, txt=f" {A1.label_44}")
        pdf.ln(20)

        employer: str = f"{A1.label_45}{COLON} {data[A1P.EMPLOYER_DIRECTOR]}"
        employee: str = f"{A1. label_46}{COLON} {data[A1P.EMPLOYEE]}"
        pdf.cell(w=0, h=0, txt=employer, align=ALIGN_LEFT)
        pdf.cell(w=0, h=0, txt=employee, align=ALIGN_RIGHT)
        pdf.ln(20)
        pdf.cell(w=0, h=0, txt=f"{create_line(len(employer))}", align=ALIGN_LEFT)
        pdf.cell(w=0, h=0, txt=f"{create_line(len(employee))}", align=ALIGN_RIGHT)

        output: str = replace_character(
            f"{nameof(A1)}{DOWN_DASH}{data[A1P.EMPLOYER].upper()}{DOWN_DASH}{data[A1P.EMPLOYEE].upper()}{PDF_EXTENSION}"
        )
        pdf.output(output)

    @staticmethod
    def generate_working_hours_sheet(data: Dict) -> None:
        employer: Employer = DatabaseHandler.get_employer_from_employer_name(data[Sheet.EMPLOYER])
        employee: Employee = DatabaseHandler.get_employee_from_personal_id(
            parse_personal_id_from_string(data[Sheet.EMPLOYEE])
        )
        pdf: PDFWorkingHoursSheet = PDFWorkingHoursSheet(
            employer, employee, data[Sheet.MONTH], data[Sheet.YEAR], orientation=LANDSCAPE, format=A4
        )
        pdf.alias_nb_pages()
        pdf.add_page()

        pdf.set_margin(11)
        locale.setlocale(locale.LC_ALL, f"{LOCALE_CROATIA}{DOT}utf8")
        cal = calendar.Calendar(calendar.MONDAY)

        pdf.set_font(NOTO_SANS, BOLD, 8)
        for index, item in enumerate(SHEET_DATA):
            if index == 1:
                pdf.cell(w=19, h=None, txt=item, border=True, align=ALIGN_CENTER)
            else:
                pdf.cell(w=16, h=None, txt=item, border=True, align=ALIGN_CENTER)

        dates: List = remove_unnecesary_dates_from_calendar(
            cal.itermonthdays4(int(data[Sheet.YEAR]), int(data[Sheet.MONTH])), int(data[Sheet.MONTH])
        )
        pdf.ln()
        size = 4.5
        for date in dates:
            pdf.cell(w=16, h=size, txt=create_date(date), border=True, align=ALIGN_CENTER)
            pdf.cell(w=19, h=size, txt=calendar.day_name[date[3]], border=True)
            pdf.cell(w=16, h=size, txt=SPACE, border=True)
            pdf.cell(w=16, h=size, txt=SPACE, border=True)
            pdf.cell(w=16, h=size, txt=SPACE, border=True)
            pdf.cell(w=16, h=size, txt=SPACE, border=True)
            pdf.cell(w=16, h=size, txt=SPACE, border=True)
            pdf.cell(w=16, h=size, txt=SPACE, border=True)
            pdf.cell(w=16, h=size, txt=SPACE, border=True)
            pdf.cell(w=16, h=size, txt=SPACE, border=True)
            pdf.cell(w=16, h=size, txt=SPACE, border=True)
            pdf.cell(w=16, h=size, txt=SPACE, border=True)
            pdf.cell(w=16, h=size, txt=SPACE, border=True)
            pdf.cell(w=16, h=size, txt=SPACE, border=True)
            pdf.cell(w=16, h=size, txt=SPACE, border=True)
            pdf.cell(w=16, h=size, txt=SPACE, border=True)
            pdf.cell(w=16, h=size, txt=SPACE, border=True)
            pdf.ln()

        print(OUTPUT_DIR)

        output: str = replace_character(
            f"{WHS}{DOWN_DASH}{data[Sheet.EMPLOYER].upper()}{DOWN_DASH}{data[Sheet.EMPLOYEE].upper()}{DOWN_DASH}{str(data[Sheet.MONTH]).upper()}{DOWN_DASH}{str(data[Sheet.YEAR]).upper()}{PDF_EXTENSION}"
        )
        pdf.output(output)
